name: RDP Setup with User Files (no sleep)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    strategy:
      matrix:
        session: [1,2,3,4,5,6]  # 6 parallel sessions
    timeout-minutes: 3600

    steps:
      # 1) Checkout repository so files are available
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2) Enable RDP + firewall
      - name: Enable RDP + Firewall
        shell: powershell
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="AllowRDP" >$null 2>&1
          netsh advfirewall firewall add rule name="AllowRDP" dir=in action=allow protocol=TCP localport=3389

      # 3) Create RDP user (temporarily disable password complexity so "1234" works)
      - name: Create RDP User (Password = 1234)
        shell: powershell
        run: |
          # Export and modify local security policy to allow weak password
          $cfg = "$env:TEMP\secpol.cfg"
          secedit /export /cfg $cfg

          $content = Get-Content $cfg -Raw
          if ($content -match 'PasswordComplexity\s*=') {
            $content = $content -replace 'PasswordComplexity\s*=\s*\d','PasswordComplexity = 0'
          } else {
            $content += "`r`nPasswordComplexity = 0"
          }
          $content | Set-Content $cfg -Force
          secedit /configure /db $env:windir\security\local.sdb /cfg $cfg /areas SECURITYPOLICY
          gpupdate /force

          # Build username from matrix value
          $username = "RDP${{ matrix.session }}"
          $password = "1234"

          Write-Host "Creating user: $username"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            Write-Host "Removing existing user $username"
            Remove-LocalUser -Name $username -ErrorAction SilentlyContinue
          }

          New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username

          echo "RDP_USER=$username" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      # 4) Install Python dependencies and Playwright browsers
      - name: Install Python Dependencies
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          pip install PyQt5 playwright requests
          playwright install

      # 5) Copy required repository files to each user's Downloads\NewFolder
      - name: Setup User Files
        shell: powershell
        run: |
          $username = "RDP${{ matrix.session }}"
          $userProfile = "C:\Users\$username"
          $downloadFolder = Join-Path $userProfile "Downloads\NewFolder"
          if (-not (Test-Path $downloadFolder)) {
            New-Item -ItemType Directory -Path $downloadFolder -Force | Out-Null
          }

          $repoFolder = "${{ github.workspace }}"

          # Copy files if they exist in the repo; if missing, write a warning file so you see it
          $files = @("prox.txt","rpa.json","useragent.txt","humanex.py")
          foreach ($f in $files) {
            $src = Join-Path $repoFolder $f
            if (Test-Path $src) {
              Copy-Item -Path $src -Destination $downloadFolder -Force
            } else {
              "MISSING: $f" | Out-File -FilePath (Join-Path $downloadFolder "MISSING_$f.txt")
            }
          }

      # 6) Print session info (no sleep) — workflow will finish after this step
      - name: Print RDP Info (workflow will finish)
        shell: powershell
        run: |
          $username = $env:RDP_USER
          $password = $env:RDP_PASS
          $folder = "C:\Users\$username\Downloads\NewFolder"
          Write-Host "======================================"
          Write-Host "Session: ${{ matrix.session }}"
          Write-Host "Username: $username"
          Write-Host "Password: $password"
          Write-Host "Files copied to: $folder"
          Write-Host "Note: Runner will be destroyed when the workflow completes — RDP will NOT persist."
          Write-Host "======================================"
