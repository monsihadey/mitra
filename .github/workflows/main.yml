name: RDP Setup with User Files

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    strategy:
      matrix:
        session: [1,2,3]  # 6 parallel sessions
    timeout-minutes: 3600

    steps:
      # Step 1: Checkout repository (so files are accessible)
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Enable RDP + Firewall + Prevent Disconnects
      - name: Enable RDP + Firewall
        run: |
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Allow RDP through firewall
          netsh advfirewall firewall delete rule name="AllowRDP" >$null 2>&1
          netsh advfirewall firewall add rule name="AllowRDP" dir=in action=allow protocol=TCP localport=3389

      # Step 3: Create RDP user
      - name: Create RDP User
        run: |
          $username = "RDP$(${{ matrix.session }})"
          $password = "1234"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) { Remove-LocalUser -Name $username }

          New-LocalUser -Name $username -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username

          echo "RDP_CREDS=User: $username | Password: $password" >> $env:GITHUB_ENV

      # Step 4: Install Python dependencies
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyQt5 playwright requests
          playwright install

      # Step 5: Copy repository files to each user's Downloads folder
      - name: Setup User Files
        run: |
          $username = "RDP$(${{ matrix.session }})"
          $userProfile = "C:\Users\$username"
          $downloadFolder = Join-Path $userProfile "Downloads\NewFolder"
          if (-not (Test-Path $downloadFolder)) { New-Item -ItemType Directory -Path $downloadFolder -Force }

          # Copy files from repository (prox.txt, rpa.json, useragent.txt, humanex.py)
          $repoFolder = "${{ github.workspace }}"
          Copy-Item -Path (Join-Path $repoFolder "prox.txt") -Destination $downloadFolder -Force
          Copy-Item -Path (Join-Path $repoFolder "rpa.json") -Destination $downloadFolder -Force
          Copy-Item -Path (Join-Path $repoFolder "useragent.txt") -Destination $downloadFolder -Force
          Copy-Item -Path (Join-Path $repoFolder "humanex.py") -Destination $downloadFolder -Force

      # Step 6: Keep Session Alive
      - name: Keep Session Alive
        run: |
          $username = "RDP$(${{ matrix.session }})"
          $tsIP = "N/A (RDP ready)"
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Username: $username"
          Write-Host "Password: 1234"
          Write-Host "Downloads Folder: C:\Users\$username\Downloads\NewFolder"
          Write-Host "Files: prox.txt, rpa.json, useragent.txt, humanex.py"
          Write-Host "==================`n"

          while ($true) {
            Write-Host "[$(Get-Date)] RDP$(${{ matrix.session }}) Active"
            Start-Sleep -Seconds 300
          }
